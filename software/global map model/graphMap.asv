DATA = 'dbn_nez';
SEG = 1;
MARGIN = 0;
MLT_MARGIN = 1;
MAGLAT_CHUNK_SIZE = 10;
% import the raw unprocessed data
if SEG == 1
    raw = readtable("..\\..\\data input\\HalloweenStorm-SuperMAG-Storm1.csv", "Delimiter",",", "DatetimeType","datetime");
    raw_ACE = readtable("..\\..\\data output\\ACE_0509_interp.csv");
    TIME = 309;
    DURATION = 240;

else
    TIME = 1044;
    DURATION = 420;
    raw = readtable("HalloweenStorm-SuperMAG-1724.csv", "Delimiter",",", "DatetimeType","datetime");
    raw_ACE = readtable("ACE_1724_interp.csv");
end

INTERVAL = TIME:TIME+DURATION-1;

% get the stations from the raw data
[Stations,IA,IC] = unique(raw.IAGA, 'stable');
mlt_all = raw.MLT;
maglat_all = raw.MAGLAT;
% get the latitude and longitude of each station
lat = raw.GEOLAT(1:length(Stations), 1);
long = raw.GEOLON(1:length(Stations), 1);
By = raw_ACE.By;
Bz = raw_ACE.Bz;

% clear LOC;
% LOC={};

% for i = 1:length(raw.MLT)/length(Stations)
%     loc_n = [];
%     loc_m = [];
%     n = 0;
%     m = 0;

%     for j = 1:length(Stations)
%         mlt = mlt_all((i-1)*length(Stations)+j);
%         if mlt <= 12+MLT_MARGIN && mlt >= 12-MLT_MARGIN
%             m = m + 1;
%             loc_m(m).Geometry = 'Point';
%             loc_m(m).Lat = lat(j);
%             loc_m(m).Lon = long(j);
%         else
%             n = n + 1;
%             loc_n(n).Geometry = 'Point';
%             loc_n(n).Lat = lat(j);
%             loc_n(n).Lon = long(j);
%         end
%     end
%     LOC{1,i} = loc_n;
%     LOC{2,i} = loc_m;
% end

clear LOC;
% lat + long of stattions MLT != 12
LOC={};

for i = 1:length(raw.MLT)/length(Stations)
    % temp storage for MLT != 12
    loc_n = [];
    % temp storage for MLT == 12
    loc_m = [];
    % indexs
    loc_n_i = zeros(ceil(180/MAGLAT_CHUNK_SIZE)+1,1) + 1;
    loc_m_i = zeros(ceil(180/MAGLAT_CHUNK_SIZE)+1,1) + 1;
    % loop through each station individually
    % j = index of station
    for j = 1:length(Stations)
        mlt = mlt_all((i-1)*length(Stations)+j);
        maglat = maglat_all((i-1)*length(Stations)+j);
        % decide which maglat chunk the station is in
        maglat_chunk = floor(maglat/MAGLAT_CHUNK_SIZE) + ceil(floor(180/MAGLAT_CHUNK_SIZE)/2)+1;
        % append the station to the correct list
        if mlt <= 12+MLT_MARGIN && mlt >= 12-MLT_MARGIN
            loc_m{maglat_chunk}(loc_m_i(maglat_chunk)).Geometry = 'Point';
            loc_m{maglat_chunk}(loc_m_i(maglat_chunk)).Lat = lat(j);
            loc_m{maglat_chunk}(loc_m_i(maglat_chunk)).Lon = long(j);
            loc_m_i(maglat_chunk) = loc_m_i(maglat_chunk) + 1;
        else
            loc_n{maglat_chunk}(loc_n_i(maglat_chunk)).Geometry = 'Point';
            loc_n{maglat_chunk}(loc_n_i(maglat_chunk)).Lat = lat(j);
            loc_n{maglat_chunk}(loc_n_i(maglat_chunk)).Lon = long(j);
            loc_n_i(maglat_chunk) = loc_n_i(maglat_chunk) + 1;
        end
    end
    LOC{1,i} = loc_m;
    LOC{2,i} = loc_n;
end
% struct of LOC
%                  t=1            t=2            t=3            t=4            t=5            t=6            t=7        t=n 
% MLT == 12 -> {1×16 cell}    {1×16 cell}    {1×16 cell}    {1×16 cell}    {1×16 cell}    {1×16 cell}    {1×16 cell}    ...
% MLT != 12 -> {1×18 cell}    {1×18 cell}    {1×18 cell}    {1×18 cell}    {1×18 cell}    {1×18 cell}    {1×18 cell}    ...

% struct of one of the cell
%    -90           -89 ~ -80       -79 ~ -60               80 ~ 90
% {0×0 double}    {1×4 double}    {0×0 double}    ...    {1×5 double}
clear max;
clear min;
max_lat = 90;
min_lat = -90;
max_long = 180;
min_long = -180;

clear max;
clear min;
% extract the necessary data from the raw data
clear data;
data = {};
for i = 1:length(Stations)
    % raw datum refers to all the data from a single station
    raw_datum = raw(raw.IAGA == string(Stations(i)), :);
    % extract the needed datum from the raw datum
    % datum = table2array(raw_datum(INTERVAL,{DATA}));
    datum = table2array(raw_datum(:,{DATA}));
    %interpolate the Nan values
    datum = fillmissing(datum, 'linear');
    % add the datum to the data cell array
    data = [data; datum];
end

% combine the data and the Stations together
clear OBS;
OBS = table(Stations, data, lat, long);
%resulting sample structure of all:
    % Stations         data           lat      long  
    % ________    _______________    _____    _______
    % {'BOU'}     {1440×1 double}    40.14    -105.24
    % {'BSL'}     {1440×1 double}    30.35     -89.64
    % {'FRD'}     {1440×1 double}     38.2     -77.37
    % {'FRN'}     {1440×1 double}    37.09    -119.72
    % {'NEW'}     {1440×1 double}    48.27    -117.12

%combine all the values together
clear dat;
dat = [];
for i = 1:length(OBS.Stations)
    dat = [dat OBS(strcmp(OBS.Stations, OBS.Stations(i)), : ).data{1}];
end

%get the upper and lower bounds of the data
clear min;
clear max;

min = min(min(dat));
max = max(max(dat));
    %Use meshgrid to create a set of 2-D grid points in the longitude-latitude plane and then use griddata to interpolate the corresponding depth at those points:
[longi,lati] = meshgrid(min_long:1:max_long, min_lat:1:max_lat); % * 0.5 is the resolution, longitude then latitude
% graph the data
s = shaperead('landareas.shp');
for t = 60: length(OBS.data{1})
% for t = 1:1
    disp(["Generating" t "..."]);
    dat_c = dat(t,:);
    v = variogram([OBS.long OBS.lat],dat_c');
    [~,~,~,vstruct] = variogramfit(v.distance,v.val,[],[],[],'model','stable');
    close;
    [OBSi,OBSVari] = krigingtest(vstruct,OBS.long',OBS.lat',dat_c,longi,lati);
    
    
  figure('Color','w', 'Position',[0 0 1280 720]);

    h=pcolor(longi,lati,OBSi); % * draw the points
    hold on
    set(h,'EdgeColor','none'); 
        
    % mapshow(LOC{1,t},'Marker','o',...
    % 'MarkerFaceColor',[1 0.5 0],'MarkerEdgeColor','k');
    % mapshow(LOC{2,t},'Marker','o',...
    % 'MarkerFaceColor','b','MarkerEdgeColor','k');
    % display the stations
    for i = 1:length(LOC{2,t})
        if ~isempty(LOC{2,t}{i})
            if i/2 ~= floor(i/2)
                c = [0 0 0];
            else
                c = [1 1 1];
            end
            geoshow(LOC{2,t}{i},'Marker','o',...
            'MarkerFaceColor',c,'MarkerEdgeColor','k', 'MarkerSize', 5);
        end
    end

    for i = 1:length(LOC{1,t})
        if ~isempty(LOC{1,t}{i})
            if i/2 ~= floor(i/2)
                c = [1 0 1];
            else
                c = [1 0 1];
            end
            geoshow(LOC{1,t}{i},'Marker','d',...
            'MarkerFaceColor',c,'MarkerEdgeColor','k', 'MarkerSize', 5);
        end
    end
    mapshow(s,'FaceAlpha', 0);
    
    % colormap gray;
    xlabel('Longitude'), ylabel('Latitude');
    c = colorbar; 
    clim("manual");
    clim([min max]); % * colorbar range
    map =[0.382 0.0 0.382
0.386 0.0 0.387
0.389 0.0 0.393
0.393 0.0 0.398
0.397 0.0 0.404
0.401 0.0 0.409
0.404 0.0 0.415
0.408 0.0 0.42
0.411 0.0 0.426
0.415 0.0 0.431
0.418 0.0 0.436
0.421 0.0 0.442
0.425 0.0 0.447
0.428 0.0 0.452
0.431 0.0 0.458
0.434 0.0 0.463
0.437 0.0 0.468
0.44 0.0 0.474
0.443 0.0 0.479
0.445 0.0 0.484
0.448 0.0 0.489
0.451 0.0 0.495
0.453 0.0 0.5
0.456 0.0 0.505
0.459 0.0 0.51
0.461 0.0 0.515
0.463 0.0 0.521
0.466 0.0 0.526
0.468 0.0 0.531
0.47 0.0 0.536
0.472 0.0 0.541
0.474 0.0 0.546
0.476 0.0 0.551
0.478 0.0 0.556
0.48 0.0 0.561
0.482 0.0 0.566
0.484 0.0 0.571
0.486 0.0 0.577
0.487 0.0 0.582
0.489 0.0 0.587
0.491 0.0 0.592
0.492 0.0 0.596
0.494 0.0 0.601
0.495 0.0 0.606
0.496 0.0 0.611
0.498 0.0 0.616
0.499 0.0 0.621
0.5 0.0 0.626
0.501 0.0 0.631
0.502 0.0 0.636
0.503 0.0 0.641
0.504 0.0 0.646
0.505 0.0 0.651
0.506 0.0 0.656
0.507 0.0 0.66
0.508 0.0 0.665
0.509 0.0 0.67
0.509 0.0 0.675
0.51 0.0 0.68
0.51 0.0 0.685
0.511 0.0 0.689
0.511 0.0 0.694
0.512 0.0 0.699
0.512 0.0 0.704
0.512 0.0 0.708
0.512 0.0 0.713
0.513 0.0 0.718
0.513 0.0 0.723
0.513 0.0 0.727
0.513 0.0 0.732
0.513 0.0 0.737
0.513 0.0 0.742
0.512 0.0 0.746
0.512 0.0 0.751
0.512 0.0 0.756
0.512 0.0 0.76
0.511 0.0 0.765
0.511 0.0 0.77
0.51 0.0 0.774
0.51 0.0 0.779
0.509 0.0 0.784
0.509 0.0 0.788
0.508 0.0 0.793
0.507 0.0 0.798
0.506 0.0 0.802
0.506 0.0 0.807
0.505 0.0 0.812
0.504 0.0 0.816
0.503 0.0 0.821
0.502 0.0 0.825
0.5 0.0 0.83
0.499 0.0 0.835
0.498 0.0 0.839
0.497 0.0 0.844
0.495 0.0 0.848
0.494 0.0 0.853
0.492 0.0 0.857
0.491 0.0 0.862
0.489 0.0 0.866
0.488 0.0 0.871
0.486 0.0 0.875
0.484 0.0 0.88
0.482 0.0 0.885
0.481 0.0 0.889
0.479 0.0 0.894
0.477 0.0 0.898
0.475 0.0 0.903
0.473 0.0 0.907
0.47 0.0 0.911
0.468 0.0 0.916
0.466 0.0 0.92
0.464 0.0 0.925
0.461 0.0 0.929
0.459 0.0 0.934
0.456 0.0 0.938
0.454 0.0 0.943
0.451 0.0 0.947
0.449 0.0 0.952
0.446 0.0 0.956
0.443 0.0 0.96
0.44 0.0 0.965
0.437 0.0 0.969
0.434 0.0 0.974
0.431 0.0 0.978
0.428 0.0 0.982
0.425 0.0 0.987
0.422 0.0 0.991
0.419 0.0 0.996
0.414 0.0 1.0
0.414 0.0 1.0
0.414 0.0 1.0
0.414 0.0 1.0
0.414 0.0 1.0
0.414 0.0 1.0
0.414 0.0 1.0
0.414 0.0 1.0
0.413 0.0 1.0
0.413 0.0 1.0
0.413 0.0 1.0
0.413 0.0 1.0
0.413 0.0 1.0
0.413 0.0 1.0
0.413 0.0 1.0
0.412 0.0 1.0
0.412 0.0 1.0
0.412 0.0 1.0
0.412 0.0 1.0
0.412 0.0 1.0
0.411 0.0 1.0
0.411 0.0 1.0
0.411 0.0 1.0
0.411 0.0 1.0
0.41 0.0 1.0
0.41 0.0 1.0
0.41 0.0 1.0
0.409 0.0 1.0
0.409 0.0 1.0
0.408 0.0 1.0
0.408 0.0 1.0
0.408 0.0 1.0
0.407 0.0 1.0
0.406 0.0 1.0
0.406 0.0 1.0
0.405 0.0 1.0
0.405 0.0 1.0
0.404 0.0 1.0
0.403 0.0 1.0
0.402 0.0 1.0
0.402 0.0 1.0
0.401 0.0 1.0
0.4 0.0 1.0
0.399 0.0 1.0
0.398 0.0 1.0
0.397 0.0 1.0
0.395 0.0 1.0
0.394 0.0 1.0
0.393 0.0 1.0
0.391 0.0 1.0
0.39 0.0 1.0
0.388 0.0 1.0
0.386 0.0 1.0
0.385 0.0 1.0
0.383 0.0 1.0
0.381 0.0 1.0
0.378 0.0 1.0
0.376 0.0 1.0
0.373 0.0 1.0
0.371 0.0 1.0
0.368 0.0 1.0
0.365 0.0 1.0
0.362 0.0 1.0
0.358 0.0 1.0
0.354 0.0 1.0
0.35 0.0 1.0
0.346 0.0 1.0
0.342 0.0 1.0
0.337 0.0 1.0
0.332 0.0 1.0
0.327 0.0 1.0
0.321 0.0 1.0
0.315 0.0 1.0
0.308 0.0 1.0
0.301 0.0 1.0
0.294 0.0 1.0
0.286 0.0 1.0
0.277 0.0 1.0
0.268 0.0 1.0
0.259 0.0 1.0
0.248 0.0 1.0
0.237 0.0 1.0
0.225 0.0 1.0
0.213 0.0 1.0
0.199 0.0 1.0
0.185 0.0 1.0
0.169 0.0 1.0
0.152 0.0 1.0
0.133 0.0 1.0
0.113 0.0 1.0
0.091 0.0 1.0
0.065 0.0 1.0
0.036 0.0 1.0
0.0 0.011 1.0
0.0 0.055 1.0
0.0 0.093 1.0
0.0 0.128 1.0
0.0 0.163 1.0
0.0 0.198 1.0
0.0 0.232 1.0
0.0 0.267 1.0
0.0 0.303 1.0
0.0 0.338 1.0
0.0 0.375 1.0
0.0 0.412 1.0
0.0 0.449 1.0
0.0 0.487 1.0
0.0 0.526 1.0
0.0 0.566 1.0
0.0 0.606 1.0
0.0 0.647 1.0
0.0 0.689 1.0
0.0 0.731 1.0
0.0 0.774 1.0
0.0 0.817 1.0
0.0 0.861 1.0
0.0 0.905 1.0
0.0 0.95 1.0
0.0 0.996 1.0
0.0 1.0 0.895
0.0 1.0 0.773
0.0 1.0 0.644
0.0 1.0 0.506
0.0 1.0 0.356
0.0 1.0 0.186
0.024 1.0 0.0
0.096 1.0 0.0
0.156 1.0 0.0
0.211 1.0 0.0
0.262 1.0 0.0
0.311 1.0 0.0
0.357 1.0 0.0
0.402 1.0 0.0
0.446 1.0 0.0
0.488 1.0 0.0
0.528 1.0 0.0
0.568 1.0 0.0
0.606 1.0 0.0
0.643 1.0 0.0
0.678 1.0 0.0
0.713 1.0 0.0
0.746 1.0 0.0
0.778 1.0 0.0
0.809 1.0 0.0
0.839 1.0 0.0
0.868 1.0 0.0
0.896 1.0 0.0
0.922 1.0 0.0
0.948 1.0 0.0
0.972 1.0 0.0
0.996 1.0 0.0
1.0 0.98 0.0
1.0 0.957 0.0
1.0 0.934 0.0
1.0 0.912 0.0
1.0 0.89 0.0
1.0 0.87 0.0
1.0 0.85 0.0
1.0 0.831 0.0
1.0 0.813 0.0
1.0 0.796 0.0
1.0 0.779 0.0
1.0 0.763 0.0
1.0 0.747 0.0
1.0 0.733 0.0
1.0 0.719 0.0
1.0 0.705 0.0
1.0 0.693 0.0
1.0 0.68 0.0
1.0 0.669 0.0
1.0 0.658 0.0
1.0 0.647 0.0
1.0 0.637 0.0
1.0 0.628 0.0
1.0 0.619 0.0
1.0 0.61 0.0
1.0 0.602 0.0
1.0 0.595 0.0
1.0 0.587 0.0
1.0 0.58 0.0
1.0 0.574 0.0
1.0 0.568 0.0
1.0 0.562 0.0
1.0 0.556 0.0
1.0 0.551 0.0
1.0 0.546 0.0
1.0 0.541 0.0
1.0 0.537 0.0
1.0 0.533 0.0
1.0 0.529 0.0
1.0 0.525 0.0
1.0 0.522 0.0
1.0 0.518 0.0
1.0 0.515 0.0
1.0 0.512 0.0
1.0 0.51 0.0
1.0 0.507 0.0
1.0 0.505 0.0
1.0 0.502 0.0
1.0 0.5 0.0
1.0 0.498 0.0
1.0 0.496 0.0
1.0 0.494 0.0
1.0 0.493 0.0
1.0 0.491 0.0
1.0 0.489 0.0
1.0 0.488 0.0
1.0 0.487 0.0
1.0 0.485 0.0
1.0 0.484 0.0
1.0 0.483 0.0
1.0 0.482 0.0
1.0 0.481 0.0
1.0 0.48 0.0
1.0 0.479 0.0
1.0 0.478 0.0
1.0 0.478 0.0
1.0 0.477 0.0
1.0 0.476 0.0
1.0 0.476 0.0
1.0 0.475 0.0
1.0 0.474 0.0
1.0 0.474 0.0
1.0 0.473 0.0
1.0 0.473 0.0
1.0 0.473 0.0
1.0 0.472 0.0
1.0 0.472 0.0
1.0 0.471 0.0
1.0 0.471 0.0
1.0 0.471 0.0
1.0 0.47 0.0
1.0 0.47 0.0
1.0 0.47 0.0
1.0 0.47 0.0
1.0 0.469 0.0
1.0 0.469 0.0
1.0 0.469 0.0
1.0 0.469 0.0
1.0 0.468 0.0
1.0 0.468 0.0
1.0 0.468 0.0
1.0 0.468 0.0
1.0 0.468 0.0
1.0 0.468 0.0
1.0 0.468 0.0
1.0 0.467 0.0
1.0 0.467 0.0
1.0 0.467 0.0
1.0 0.467 0.0
1.0 0.467 0.0
1.0 0.467 0.0
1.0 0.467 0.0
1.0 0.467 0.0
1.0 0.467 0.0
1.0 0.467 0.0
];
    colormap(map);
    %colormap(parula(24));
    %colormap(jet(16));
    set(gca,'ColorScale','linear')
    c.Label.String = "Variation (nT)";
    c.Label.FontSize = 12;
    
    if t+TIME-1 <= 1440
        date_label =  '20031029 minute ';
        minute_time = t+TIME-1;
    else
        date_label =  '20031030 minute ';
        minute_time = t+TIME-1-1440;
    end
    hour = num2str(fix(minute_time/60));
    if strlength(hour) == 1
        hour = ['0' hour];
    end

    minute = num2str(mod(minute_time, 60));
    if strlength(minute) == 1
        minute = ['0' minute];
    end
    str_title=['Global Map of Magnetic Field Variation North Component dBn at UTC ' hour ':' minute];
    title(str_title);
    %annotation('textbox',...
 %       [0.82 0.066 0.077 0.052],... % * position of the text box
 %       'String',{'nT'},...
 %       'FontSize',12,...
  %      'FontName','Arial',...
  %      'FitBoxToText','off',...
  %      'LineStyle','none');
    xlim([min_long max_long-1]); % * longitude range
    ylim([min_lat max_lat-1]); % * latitude range
    x0=10;
    y0=10;
    width=600;
    height=400;
    set(gcf,'position',[x0,y0,width,height]);
    saveas(gcf,['temp4\',date_label,num2str(minute_time),'.png'], 'png');
end